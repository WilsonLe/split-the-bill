rules_version = '2';
service cloud.firestore {
  function incomingData(){
    return request.resource.data;
  }

  function existingData(){
    return resource.data;
  }

  function isLoggedIn(){
    return request.auth != null;
  }

  function isCreator(database, event) {
    return get(/databases/$(database)/documents/events/$(event)).data.creator.uid == request.auth.uid
  }

  function isMember(database, event){
    return exists(/databases/$(database)/documents/users/$(request.auth.uid)/events/$(event))
  }

  function isExpenseOwner(){
    return request.auth.uid == existingData().user;
  }

  function theUserExist(database, user){
    return exists(/databases/$(database)/documents/users/$(user))
  }

  function isTheUser(database, user){
    return get(/databases/$(database)/documents/users/$(user)).data.uid == request.auth.uid;
  }

  function userAlreadyJoined(database, user, event){
    return exists(/databases/$(database)/documents/users/$(user)/events/$(event))
  }

  function deleterIsCreator(database, event){
    return get(/databases/$(database)/documents/events/$(event)).data.creator.uid == request.auth.uid
  }

  function eventTypeCheck(){
    return incomingData().code is string
    && incomingData().createdAt is timestamp
    && incomingData().name is string
    && incomingData().creator is map
  }

  function expenseTypeCheck(){
    return incomingData().amount > 0
    && incomingData().description is string
    && incomingData().id is string
    && incomingData().spentAt is timestamp
    && incomingData().user is string;
  }

  function userTypeCheck(){
    return incomingData().uid is string
    && (incomingData().photoURL is string
    || incomingData().photoURL == null)
    && incomingData().displayName is string
  }

  match /databases/{database}/documents {
    match /events/{event} {
      allow read:
      	if isLoggedIn();
      allow create:
        if isLoggedIn() 
        && eventTypeCheck();
      allow delete:
        if isLoggedIn() 
        && isCreator(database, event);
    }

    match /events/{event}/expenses/{expense} {
      allow create: 
        if isLoggedIn() 
        && isMember(database, event)
        && expenseTypeCheck();
      allow update: 
        if isLoggedIn()
        && ((isMember(database, event)
        && request.auth.uid == existingData().user)
        || isCreator(database, event))
        && expenseTypeCheck();
      allow delete: if isLoggedIn()
        && ((isMember(database, event) && isExpenseOwner())
        || isCreator(database, event));
      allow read:
        if isLoggedIn()
        && (isMember(database, event));
    }
    
    match /events/{event}/members/{member} {
      allow create:
        if isLoggedIn()
        && userTypeCheck();
      allow update:
        if false;
      allow delete:
        if isLoggedIn()
        && ((isMember(database, event) 
        && existingData().uid == request.auth.uid) 
        || isCreator(database, event));
      allow read:
        if isLoggedIn()
        && isMember(database, event);
    }
    
    match /users/{user} {
      allow read:
        if isLoggedIn()
        && ((resource == null)
        || (resource != null
        && existingData().uid == request.auth.uid));
      allow write:
        if isLoggedIn() && incomingData().uid == request.auth.uid;
    }
    
    match /users/{user}/events/{event} {
      allow read:
        if isLoggedIn() 
        && ((theUserExist(database, user) == false)
        ||(theUserExist(database, user) 
        && isTheUser(database, user)));
      allow create:
        if isLoggedIn()
        && userAlreadyJoined(database, user, event) == false
        && isTheUser(database, user)
        && incomingData().code is string;
      allow delete:
        if isLoggedIn()
        && userAlreadyJoined(database, user, event)
        && (isTheUser(database, user) 
        || deleterIsCreator(database, event));
    }

    match /versions/{version} {
      allow read: if true;
      allow write: if false;
    }
  }
}



